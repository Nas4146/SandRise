---
import BaseLayout from '@layouts/BaseLayout.astro';
import { getCollection, getEntry } from 'astro:content';

export async function getStaticPaths() {
  const projects = (await getCollection('projects')).filter((project) => !project.data.draft);
  return projects.map((project) => ({
    params: { slug: project.slug }
  }));
}
import type { CollectionEntry } from 'astro:content';

const { slug } = Astro.params;

if (!slug) {
  throw new Error('Project slug missing');
}

const entry = await getEntry('projects', slug);

if (!entry) {
  throw new Error(`Project not found for slug: ${slug}`);
}

const project = entry;
const projects = await getCollection('projects');
const ordered = projects.sort((a, b) => a.data.title.localeCompare(b.data.title));
const currentIndex = ordered.findIndex((item) => item.slug === slug);
const nextProject: CollectionEntry<'projects'> | undefined =
  currentIndex >= 0 && currentIndex < ordered.length - 1 ? ordered[currentIndex + 1] : ordered[0];

const structuredData = {
  '@context': 'https://schema.org',
  '@type': 'CreativeWork',
  name: project.data.title,
  description: project.data.summary,
  creator: {
    '@type': 'Person',
    name: 'Nick Sanders'
  }
};
---
<BaseLayout
  title={`${project.data.title} â€” SandRise Project`}
  description={project.data.summary}
  image={project.data.heroImage}
  structuredData={structuredData}
>
  <article class="project-article">
    <header class="project-hero pattern-grid">
      <div class="container hero-inner">
        <div class="hero-text">
          <span class="badge">{project.data.category}</span>
          <h1>{project.data.title}</h1>
          <p class="lead">{project.data.summary}</p>
          <dl class="project-facts">
            <div>
              <dt>Role</dt>
              <dd>{project.data.role}</dd>
            </div>
            <div>
              <dt>Timeline</dt>
              <dd>{project.data.timeline}</dd>
            </div>
            {project.data.metrics?.[0] && (
              <div>
                <dt>Impact</dt>
                <dd>{project.data.metrics[0].value}</dd>
              </div>
            )}
          </dl>
        </div>
        <figure class="hero-media">
          <img src={project.data.heroImage} alt={project.data.heroAlt} loading="lazy" width="960" height="540" />
        </figure>
      </div>
    </header>

    <section class="section-alt">
      <div class="container project-intro">
        <div>
          <h2>Problem & Context</h2>
          <p>{project.data.problem}</p>
        </div>
        <div>
          <h2>Role & Scope</h2>
          <p>{project.data.roleDetail}</p>
          {project.data.metrics && (
            <ul class="metrics-grid">
              {project.data.metrics.map((metric) => (
                <li>
                  <strong>{metric.value}</strong>
                  <span>{metric.label}</span>
                  {metric.hint && <small>{metric.hint}</small>}
                </li>
              ))}
            </ul>
          )}
        </div>
      </div>
    </section>

    <section>
      <div class="container">
        <h2>Process</h2>
        <div class="timeline">
          {project.data.process.map((stage) => (
            <article>
              <h3>{stage.title}</h3>
              <p>{stage.description}</p>
              {stage.media && (
                <div class="media-grid">
                  {stage.media.map((item) => (
                    <figure>
                      <img src={item.src} alt={item.alt} loading="lazy" />
                    </figure>
                  ))}
                </div>
              )}
            </article>
          ))}
        </div>
      </div>
    </section>

    <section class="section-alt">
      <div class="container outcomes">
        <h2>Outcomes</h2>
        <ul>
          {project.data.outcomes.map((item) => (
            <li>{item}</li>
          ))}
        </ul>
      </div>
    </section>

    {project.data.gallery && (
      <section>
        <div class="container gallery">
          <h2>Gallery</h2>
          <div class="gallery-grid">
            {project.data.gallery.map((item) => (
              <figure>
                <img src={item.src} alt={item.alt} loading="lazy" />
              </figure>
            ))}
          </div>
        </div>
      </section>
    )}

    <section class="reflection">
      <div class="container">
        <div class="reflection-card card">
          <h2>Reflection & Next</h2>
          <p>{project.data.reflection}</p>
          <a class="button secondary" href="/work">Back to all work</a>
        </div>
      </div>
    </section>

    {nextProject && nextProject.slug !== project.slug && (
      <section class="section-muted next-project">
        <div class="container next-card">
          <div>
            <span class="badge">Next project</span>
            <h3>{nextProject.data.title}</h3>
            <p>{nextProject.data.summary}</p>
          </div>
          <a class="button" href={`/work/${nextProject.slug}`}>View case study</a>
        </div>
      </section>
    )}
  </article>
</BaseLayout>

<style>
  .project-hero {
    padding-top: calc(var(--space-4xl) + var(--nav-height));
    padding-bottom: var(--space-3xl);
    background: var(--color-hero-bg);
    position: relative;
  }

  .hero-inner {
    display: grid;
    gap: var(--space-3xl);
    grid-template-columns: repeat(12, minmax(0, 1fr));
    align-items: center;
  }

  .hero-text {
    grid-column: span 6;
    display: grid;
    gap: var(--space-lg);
  }

  .hero-media {
    grid-column: span 6;
    margin: 0;
    border-radius: var(--radius-lg);
    overflow: hidden;
    box-shadow: 0 30px 54px rgba(12, 39, 21, 0.22);
    border: 1px solid rgba(11, 143, 98, 0.18);
  }

  .hero-media img {
    display: block;
    width: 100%;
  }

  .project-facts {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xl);
    margin: 0;
  }

  .project-facts dt {
    font-size: var(--font-size-xs);
    text-transform: uppercase;
    letter-spacing: 0.14em;
    color: var(--color-text-tertiary);
  }

  .project-facts dd {
    margin: var(--space-3xs) 0 0;
    font-size: var(--font-size-lg);
    color: var(--color-text-primary);
  }

  .project-intro {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: var(--space-3xl);
    align-items: start;
  }

  .metrics-grid {
    list-style: none;
    margin: var(--space-lg) 0 0;
    display: grid;
    gap: var(--space-lg);
  }

  .metrics-grid li {
    display: grid;
    gap: var(--space-3xs);
  }

  .metrics-grid strong {
    font-size: var(--font-size-xl);
    color: var(--color-text-primary);
  }

  .metrics-grid small {
    color: var(--color-text-tertiary);
    font-size: var(--font-size-xs);
  }

  .timeline {
    display: grid;
    gap: var(--space-2xl);
  }

  .timeline article {
    background: var(--color-surface);
    padding: var(--space-2xl);
    border-radius: var(--radius-md);
    border: 1px solid var(--color-border-subtle);
    box-shadow: 0 16px 32px rgba(17, 34, 21, 0.08);
    display: grid;
    gap: var(--space-md);
  }

  .media-grid {
    display: grid;
    gap: var(--space-md);
    grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  }

  .media-grid figure {
    margin: 0;
    border-radius: var(--radius-md);
    overflow: hidden;
  }

  .outcomes ul {
    list-style: none;
    margin: 0;
    display: grid;
    gap: var(--space-md);
  }

  .outcomes li {
    padding-left: var(--space-lg);
    position: relative;
  }

  .outcomes li::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0.65em;
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: var(--color-accent);
    opacity: 0.45;
  }

  .gallery-grid {
    display: grid;
    gap: var(--space-md);
    grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
  }

  .gallery figure {
    margin: 0;
    border-radius: var(--radius-md);
    overflow: hidden;
    box-shadow: 0 18px 36px rgba(17, 34, 21, 0.12);
    border: 1px solid rgba(11, 143, 98, 0.12);
  }

  .reflection {
    padding: var(--space-3xl) 0;
  }

  .reflection-card {
    display: grid;
    gap: var(--space-md);
    text-align: left;
    border: 1px solid rgba(11, 143, 98, 0.2);
  }

  .next-card {
    display: flex;
    justify-content: space-between;
    gap: var(--space-lg);
    flex-wrap: wrap;
    align-items: center;
  }

  @media (max-width: 980px) {
    .hero-inner {
      grid-template-columns: 1fr;
    }

    .hero-text,
    .hero-media {
      grid-column: span 1;
    }

    .project-intro {
      grid-template-columns: 1fr;
    }

    .next-card {
      flex-direction: column;
      align-items: flex-start;
    }
  }
</style>
