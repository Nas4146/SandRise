---
import SectionHeading from '@components/SectionHeading.astro';

interface Props {
  className?: string;
}

const { className = '' } = Astro.props;

interface ExploringItem {
  title: string;
  type: 'tool' | 'article' | 'research' | 'api';
  url?: string;
  description?: string;
}

const fallbackItems: ExploringItem[] = [
  {
    title: 'continue.dev',
    type: 'tool',
    url: 'https://continue.dev',
    description: 'AI-powered coding assistant for VS Code and JetBrains'
  },
  {
    title: 'Meta AI Proposes \'Metacognitive Reuse\': Turning LLM Chains-of-Thought into a Procedural Handbook that Cuts Tokens by 46%',
    type: 'research',
    description: 'Novel approach to optimizing LLM reasoning efficiency'
  },
  {
    title: 'Prototype-first software design with agents',
    type: 'article',
    description: 'New paradigm for agent-assisted development workflows'
  },
  {
    title: 'Spec-driven development: Using markdown as a programming language when building with AI',
    type: 'article',
    description: 'Treating specifications as executable artifacts in AI-assisted development'
  },
  {
    title: 'NotebookLM alternative voice/podcast API',
    type: 'api',
    description: 'Exploring alternatives for voice-based content generation'
  }
];

const feedUrl = import.meta.env.PUBLIC_EXPLORING_FEED_URL;

const exploringItems: ExploringItem[] = await (async () => {
  if (!feedUrl) return fallbackItems;

  try {
    const response = await fetch(feedUrl, {
      headers: { 'Accept': 'application/json' }
    });

    if (!response.ok) {
      console.warn(`ExploringNext feed request failed (${response.status}). Falling back to static list.`);
      return fallbackItems;
    }

    const payload = await response.json();
    if (!payload || !Array.isArray(payload.items)) {
      console.warn('ExploringNext feed payload malformed. Falling back to static list.');
      return fallbackItems;
    }

    const allowedTypes = new Set(['tool', 'article', 'research', 'api']);

    const normalized = payload.items
      .filter((item: Record<string, unknown>) => typeof item?.title === 'string' && typeof item?.url === 'string')
      .map((item: Record<string, unknown>) => {
        const type = typeof item.type === 'string' && allowedTypes.has(item.type) ? item.type : 'article';
        return {
          title: String(item.title),
          type: type as ExploringItem['type'],
          url: typeof item.url === 'string' ? item.url : undefined,
          description: typeof item.description === 'string' ? item.description : undefined
        } satisfies ExploringItem;
      });

    if (normalized.length === 0) {
      console.warn('ExploringNext feed returned no valid items. Falling back to static list.');
      return fallbackItems;
    }

    return normalized;
  } catch (error) {
    console.warn('ExploringNext feed request errored. Falling back to static list.', error);
    return fallbackItems;
  }
})();

const typeLabels = {
  tool: 'Tool',
  article: 'Article',
  research: 'Research',
  api: 'API'
};

const typeColors = {
  tool: '#3B82F6',
  article: '#10B981',
  research: '#8B5CF6',
  api: '#F59E0B'
};
---

<section class={`exploring-next-section ${className}`}>
  <div class="container">
    <div class="scroll-fade-up">
      <SectionHeading
        eyebrow="Exploring Next"
        title="Emerging tech on my radar"
        description="Tools, frameworks, and ideas I'm tracking and digging into."
      />
    </div>
    
    <ul class="exploring-list">
      {exploringItems.map((item, index) => (
        <li 
          class="exploring-item scroll-slide-in" 
          style={`--animation-delay: ${index * 0.1}s; --type-color: ${typeColors[item.type]}`}
        >
          <div class="item-header">
            <span class="item-type" style={`background-color: ${typeColors[item.type]}20; color: ${typeColors[item.type]}`}>
              {typeLabels[item.type]}
            </span>
          </div>
          <h3 class="item-title">
            {item.url ? (
              <a href={item.url} target="_blank" rel="noopener noreferrer">
                {item.title}
                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                  <polyline points="15 3 21 3 21 9"></polyline>
                  <line x1="10" y1="14" x2="21" y2="3"></line>
                </svg>
              </a>
            ) : (
              item.title
            )}
          </h3>
          {item.description && (
            <p class="item-description">{item.description}</p>
          )}
        </li>
      ))}
    </ul>
  </div>
</section>

<style>
  .exploring-next-section {
    padding: var(--space-lg) 0 var(--space-xl);
    background: var(--color-bg-secondary);
  }

  .container {
    max-width: var(--container-width);
    margin: 0 auto;
    padding: 0 var(--space-md);
  }

  .exploring-list {
    list-style: none;
    padding: 0;
    margin: var(--space-sm) 0 0;
    display: grid;
    gap: var(--space-xs);
  }

  .exploring-item {
    background: rgba(255, 255, 255, 0.6);
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.4);
    border-radius: var(--radius-sm);
    padding: var(--space-xs) var(--space-sm);
    box-shadow: 
      0 8px 16px rgba(17, 34, 21, 0.08),
      0 2px 4px rgba(17, 34, 21, 0.04),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
    transition: all var(--transition-base);
    opacity: 0;
    transform: translateY(20px);
    position: relative;
    overflow: hidden;
  }

  .exploring-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(
      90deg,
      transparent 0%,
      rgba(255, 255, 255, 0.6) 50%,
      transparent 100%
    );
    opacity: 0.5;
  }

  .exploring-item:hover {
    border-color: var(--type-color);
    background: rgba(255, 255, 255, 0.75);
    box-shadow: 
      0 12px 24px rgba(17, 34, 21, 0.12),
      0 4px 8px rgba(17, 34, 21, 0.08),
      inset 0 1px 0 rgba(255, 255, 255, 0.4);
    transform: translateY(-4px);
  }

  .exploring-item.animate {
    opacity: 1;
    transform: translateY(0);
    animation: slideInUp var(--transition-smooth) forwards;
    animation-delay: var(--animation-delay);
  }

  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .item-header {
    display: flex;
    align-items: center;
    margin-bottom: 0.25rem;
  }

  .item-type {
    font-size: 0.6rem;
    font-weight: 600;
    padding: 0.15rem 0.5rem;
    border-radius: var(--radius-round);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .item-title {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--color-text-primary);
    margin: 0 0 0.25rem;
    line-height: 1.3;
  }

  .item-title a {
    color: inherit;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.3rem;
    transition: color var(--transition-base);
  }

  .item-title a:hover {
    color: var(--color-accent);
  }

  .item-title svg {
    width: 11px;
    height: 11px;
    flex-shrink: 0;
    opacity: 0.6;
    transition: opacity var(--transition-base);
  }

  .item-title a:hover svg {
    opacity: 1;
  }

  .item-description {
    font-size: 0.75rem;
    color: var(--color-text-secondary);
    line-height: 1.4;
    margin: 0;
  }

  /* Scroll animation setup */
  .scroll-fade-up {
    opacity: 0;
    transform: translateY(30px);
    transition: all var(--transition-smooth);
  }

  .scroll-fade-up.animate {
    opacity: 1;
    transform: translateY(0);
  }

  .scroll-slide-in {
    opacity: 0;
    transform: translateY(20px);
  }

  .scroll-slide-in.animate {
    opacity: 1;
    transform: translateY(0);
  }

  /* Responsive design */
  @media (min-width: 768px) {
    .exploring-list {
      gap: var(--space-sm);
    }

    .exploring-item {
      padding: var(--space-sm) var(--space-md);
    }

    .item-title {
      font-size: 0.9375rem;
    }

    .item-description {
      font-size: 0.8125rem;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .exploring-item {
      background: rgba(17, 34, 21, 0.4);
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border-color: rgba(255, 255, 255, 0.15);
    }

    .exploring-item:hover {
      background: rgba(17, 34, 21, 0.5);
      box-shadow: 
        0 2px 8px rgba(0, 0, 0, 0.3),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .exploring-item,
    .scroll-fade-up,
    .scroll-slide-in {
      opacity: 1;
      transform: none;
      animation: none;
      transition: none;
    }

    .exploring-item:hover {
      transform: none;
    }
  }
</style>
